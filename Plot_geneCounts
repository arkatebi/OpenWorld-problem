#!/usr/bin/env python
'''
    This tool plots the gene counts for a set of organisms, where
    the gene counts are calculated from a set of UniProtKB/SwissProt 
    files. One can run this program as follows: 

      >python Plot_geneCounts -I1=sp_list.txt -I2=sprot_files.txt -I3=sprot_genes.stat.1

    The program will use the gene counts from sprot_genes.stat.1 file and draw 
    one graph for each organism. The description of the input file names:  

        sp_list.txt: This file has the list of species: column 1 has the 
            taxon ids and column 2 has the taxon names. 

        sprot_files.txt: This file has has the SwissProt filenames in the 
            format uniprot_sprot.dat.yyyy_mm for example 
            uniprot_sprot.data.2016_01 for the SwissProt file release in 
            Januray 2016. The program extracts the time points from this file.
            Also, each entry in this file corresponds to the rows in 
            sprot_genes.stat.1 file.

        sprot_genes.stat.1: This file has the gene counts. 
            Each row corresponds to the SwissProt file name listed
            in sprot_files.txt file. For each organism, there are 
            three consecutive columns (for BPO, CCO, and MFO, 
            respectively). The columns corresponds to the species 
            listed in the sp_list.txt file, in the same order.  
'''
import os
import sys
from os.path import basename 
from collections import defaultdict
import matplotlib.pyplot as plt

import ArgParser_plot as ap
import Config
import ConfigParser as cp
import FormatChecker as fc
import LocateDataset as ld

# Default configuration file name:
config_filename = '.config'

# Figure name prefix: 
figname_prefix = 'geneCount'

class Plot_geneCounts:
    def __init__(self):
        # Collect user arguments into a dictionary:
        self.parsed_dict = ap.parse_args()
        # Collect config file entries:
        self.ConfigParam = Config.read_config(config_filename)
        self.work_dir = self.ConfigParam['workdir']

        # Nonexistence of workspace means, necessary data to be used
        # in this progra is not available. So, quit the program:
        if not os.path.exists(self.work_dir):
            print('   Workspace does not exist. Run the Count_genes ' + \
                  'program first \n   to generate the necessary gene ' + \
                  'count data to be used in this \n   program')
            sys.exit(0)

        # Look for workspace, and if none exists quit the program:
        self.figure_dir = './figures'
        # Create the figure directory, if it is
        # not already in the current directory:
        if not os.path.exists(self.figure_dir):
            os.makedirs(self.figure_dir)
   
        # Extract species list file name:
        t1 = self.parsed_dict['t1']
        # Locate file for the species list file:
        self.species_filename = ld.locate_anyfile(t1, self.work_dir)

        # Get the organism count from the species file: 
        self.organism_count = self.get_organismCount()

        # Extract filename containing the list of SwissProt file names:
        t2 = self.parsed_dict['t2']
        # Locate the file containing the list of the UniProtKB/SwissProt
        # file names over a series of time points:
        self.sprot_fnList_filename = ld.locate_anyfile(t2, self.work_dir)

        # Get the file count from the file listing the SwissProt filenames: 
        self.sprot_file_count = self.get_sprot_fileCount()

        # Extract the filename containing the gene counts:
        t3 = self.parsed_dict['t3']
        # Locate the gene count file:
        self.geneCount_filename = ld.locate_anyfile(t3, self.work_dir)

        # Create output file name for target sequences:
#        self.output_filename = self.create_outfilename()
        return None

    def get_sprot_fileCount(self):
        '''
        This method counts the number of SwissProt files used in this 
        software and returns that count.
        '''
        file_count = 0
        with open(self.sprot_fnList_filename, 'r') as fh:
            for line in fh:
                # Count only the nonempty lines:
                if line.strip():
                    file_count += 1
        return file_count

    def get_organismCount(self):
        '''
        This method counts the number of organisms used in this 
        software and returns that count.
        '''
        org_count = 0
        with open(self.species_filename, 'r') as fh:
            # Skip the header line: 
            next(fh)
            # Count the number of organisms which is 
            # equal to the number of nonempty lines:
            for line in fh:
                # Count only the nonempty lines:
                if line.strip():
                    org_count += 1
        return org_count

#    def create_fig_name(self, fname_prefix):
    def create_fig_name(self, taxon_id):
        """ 
        This method creates an output filename based on the filename
        prefix provided by fname_prefix and at the end returns the newly
        created filename for a figure.
        Note:  
        This method uses index variable to find whether the previous
        versions (starting from one consecutively) of the file exists. 
        It returns the file name with the subsequent version. 
        """
        if not self.parsed_dict['outfile'] == '':
            ob = basename(self.parsed_dict['outfile']) + '.' + taxon_id
        else:
#            ob = fname_prefix
            ob = figname_prefix + '.' + taxon_id
        index = 1
        while os.path.exists(self.figure_dir + '/' + ob + '.' + str(index) + '.png'):
            index = index + 1
        output_filename = self.figure_dir + '/' + ob + '.' + str(index) + '.png'
        return output_filename

    def convert_str2num_list(self, bpo_list, cco_list, mfo_list):
        '''
        This method converts lists of strings to lists of numbers.
        '''
        for i in range(len(bpo_list)):
            bpo_list[i] = int(bpo_list[i])
            cco_list[i] = int(cco_list[i])
            mfo_list[i] = int(mfo_list[i])
        return (bpo_list, cco_list, mfo_list)

    def plot_and_save(self, bpo_list, 
                            cco_list, 
                            mfo_list, 
                            taxon_id, 
                            taxon_name):
        '''
        This method creates a graph of gene counts over a series of SwissProt
        files for a specific species and then saves the plot to a .png file.
        '''
        # Extract the time points from the sprot file name list: 
        tp_lst = self.extract_timepoints()
        fig = plt.figure(figsize=(10,10) )
        x_axis = range(1,11)
   
        # Subplot for BPO graph: 
        ax_1=fig.add_subplot(3,1,1)
        plt_title = '# of Genes Annotated with Exp Evidence Codes\n' + str(taxon_name) 
        plt.title(plt_title)
        plt.plot(x_axis, bpo_list, 'ro', x_axis, bpo_list, 'k')
        plt.ylabel('Gene Count')
        # Set offset to space at the top and bottom of the graph: 
        offset = (max(bpo_list) - min(bpo_list))/5
        plt.axis([0, self.sprot_file_count+1, min(bpo_list) - offset, max(bpo_list) + offset])


        plt.xticks(x_axis, tp_lst, size='small', horizontalalignment='center')
        text_ht = max(bpo_list) - (max(bpo_list)-min(bpo_list))/15
        ax_1.text(0.2, text_ht, 'BPO', fontsize=15)

        # Subplot for CCO graph: 
        ax_2=fig.add_subplot(3,1,2)
        plt.plot(x_axis, cco_list, 'ro', x_axis, cco_list, 'k')
        plt.ylabel('Gene Count')
        offset = (max(cco_list) - min(cco_list))/5
        # Set offset to space at the top and bottom of the graph: 
        plt.axis([0, self.sprot_file_count+1, min(cco_list)-offset, max(cco_list)+offset])

        plt.xticks(x_axis, tp_lst, size='small', horizontalalignment='center')
        text_ht = max(cco_list) - (max(cco_list)-min(cco_list))/15
        ax_2.text(0.2, text_ht, 'CCO', fontsize=15)

        # Subplot for MFO graph:
        ax_3=fig.add_subplot(3,1,3) 
        plt.plot(x_axis, mfo_list, 'ro', x_axis, mfo_list, 'k')
        plt.ylabel('Gene Count')
        # Set offset to space at the top and bottom of the graph: 
        offset = (max(mfo_list) - min(mfo_list))/5
        plt.axis([0, self.sprot_file_count+1, min(mfo_list)-offset, max(mfo_list)+offset])

        plt.xticks(x_axis, tp_lst, size='small', horizontalalignment='center')
        text_ht = max(mfo_list) - (max(mfo_list)-min(mfo_list))/15
        ax_3.text(0.2, text_ht, 'MFO', fontsize=15)

        # Get a file name for the figure to be saved:
#        fig_fname = self.create_fig_name(figname_prefix + '.' + str(taxon_id))
        fig_fname = self.create_fig_name(str(taxon_id))

        print fig_fname
        fig.savefig(fig_fname)
        #plt.show()

    def extract_taxon_info(self): 
        '''
        This method extracts the taxon id and taxon name from 
        the speceis file and then returns them as list. 
        '''
        taxon_id_list = []
        taxon_name_list = []

        fh = open(self.species_filename, 'r')
        # Skip the header line: 
        next(fh) 
        # Extract taxon id and taxon name from the file 
        # append to the corresponding lists: 
        for line in fh:
            taxon_id_list.append(line.strip().split('\t')[0])
            taxon_name_list.append(line.strip().split('\t')[1])
        return (taxon_id_list, taxon_name_list) 

    def extract_timepoints(self): 
        '''
        This method extracts the time points from the filenames 
        listed in the file self.sprot_fnList_filename.  
        '''
        fh = open(self.sprot_fnList_filename, 'r')
        tp_list = []
        for line in fh:
            tp_list.append(line.strip().split('.dat.')[-1])
        return tp_list 

    def extract_gene_count(self, tax_id_lst):
        '''
        This method extracts the gene counts from self.geneCount_filename 
        and returns those counts as a tuple of three lists - 
        one for BPO ontology, one for CCO ontology, and one for MFO ontology.
        '''
        # Initialize dictionary for gene count in BPO ontological group:
        gc_bpo_dict = defaultdict(list)
        # Initialize dictionary for gene count in CCO ontological group:
        gc_cco_dict = defaultdict(list)
        # Initialize dictionary for gene count in MFO ontological group:
        gc_mfo_dict = defaultdict(list)

        fh = open(self.geneCount_filename, 'r')
        # Skip the first two header lines of the gene count file:
        next(fh)
        next(fh)
        # Read the subseqent lines of the gene count file and
        # Store the gene counts in dictionaries - BPO, CCO, and MFO
        # ontological groups:
        for line in fh:
            line_values = line.strip().split('\t')
            tp = line_values[0]
            id_no = 0
            # For each organism, append the gene count in the list 
            # for that organism:
            for i in range(1, self.organism_count*3+1,3):
                gc_bpo_dict[tax_id_lst[id_no]].append(line_values[i])
                gc_cco_dict[tax_id_lst[id_no]].append(line_values[i+1])
                gc_mfo_dict[tax_id_lst[id_no]].append(line_values[i+2])
                id_no += 1
        return (gc_bpo_dict, gc_cco_dict, gc_mfo_dict)

    def process_data(self): 
        '''
        This method calls other methods to produce the plots for the 
        gene counts for the species set over the UniProt fileset. 
        '''
        # Extract taxon id list and taxon name list:
        tax_id_lst, tax_name_lst = self.extract_taxon_info()
        
        # Extract gene count from the gene count file:
        gc_bpo_dict, gc_cco_dict, gc_mfo_dict = self.extract_gene_count(
                                                     tax_id_lst)

        # Extract gene counts for each organism, plot and save graphs:
        for i in range(0, len(tax_id_lst)):
            # Convert the gene counts from a list of
            # strings to a list of numbers:
            bpo_list, cco_list, mfo_list = self.convert_str2num_list(
                                                gc_bpo_dict[tax_id_lst[i]], 
                                                gc_cco_dict[tax_id_lst[i]],
                                                gc_mfo_dict[tax_id_lst[i]])
            # Plot the gene counts in BPO, CCO, and MFO ontological categories
            # and save the graph to a file:
            self.plot_and_save(bpo_list,
                               cco_list,
                               mfo_list,
                               tax_id_lst[i],
                               tax_name_lst[i])
        return None
if __name__ == '__main__':
    if len(sys.argv) == 1:
        print (sys.argv[0] + ':')
        print(__doc__)
    else:
        pg = Plot_geneCounts() # Create an instance of plot_geneCount class
        pg.process_data()      # Process data
    sys.exit(0)
