#!/usr/bin/env python
'''
    This tool generates the set of protein sequences for the 
    evaluation of a predictive model. The tool accepts the following 
    four inputs:
           (1) a UniProtKB/swissProt file at time t1
           (2) a UniProtKB/swissProt file at time t2
           (3) an optional taxon id and
           (4) an optional output file name prefix
    This tool extracts the protein sequences from the UniProtKB/SwissProt 
    database at t2 for the proteins whose annotations did not have EXP 
    evidence at time t1 but gained experimental evidence at time t2.
    The extracted sequenes are written to the output files in MFO, BPO, 
    and CCO ontological categories.
   
    When the taxon id is NOT supplied, it will extract the test sequences 
    for all species. In case the taxon id is supplied by the user, the program 
    will extract the sequences for that specific organism only.

    When the output file name prefix is NOT given, it will construct an 
    output file name by using a default prefix (and the taxon id if it is 
    supplied by the user). 
    
    How to run this program?
    Mode 1: 
        For two input files uniprot_sprot.dat.2010_01 at time t1 and 
        uniprot_sprot.dat.2011_01 at time t2

       > python xTract_evalSet -I1=uniprot_sprot.dat.2010_01 -I2=uniprot_sprot.dat.2011_01
  
    Six output files will be created:
        Two files for each ontology (MFO, BPO, CCO), one containing the 
            evaluation sequences and the other containing the mapping 
            (program generated id, protein name, and GO term)
            evalSet-1.mfo.1
            evalSet-1.mfo.1.map
            evalSet-1.bpo.1
            evalSet-1.bpo.1.map
            evalSet-1.cco.1
            evalSet-1.cco.1.map
    Mode 2:
        For two input files uniprot_sprot.dat.2010_01 at time t1 and 
        uniprot_sprot.dat.2011_01 at time t2 and taxon id 9606

       > python xTract_evalSet -I1=uniprot_sprot.dat.2010_01 -I2=uniprot_sprot.dat.2011_01 -G=9606
  
    Three fasta files and the three map files will be created:
            evalSet-1.9606.mfo.1
            evalSet-1.9606.mfo.1.map
            evalSet-1.9606.bpo.1
            evalSet-1.9606.bpo.1.map
            evalSet-1.9606.cco.1
            evalSet-1.9606.cco.1.map
'''
import os
import sys
from os.path import basename 

import configparser as cp
import shutil
import subprocess

import ArgParser_xTract_evalSet as ap
import Config
import xTract_sp_evalSet as xt
import FormatChecker as fc
import LocateDataset as ld

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# Default configuration file name:
config_filename = '.cafarc' 
# Default prefix for output file name:
DEFAULT_PREFIX='evalSet-1'

class xTract_evalSet: 
    def __init__(self):
        # Collect user arguments into a dictionary:
        self.parsed_dict = ap.parse_args()

        # Collect config file entries:
        self.ConfigParam = Config.read_config(config_filename) 
        self.work_dir = self.ConfigParam['workdir']

        # Look for workspace, and if none exists create one:
        if not os.path.exists(self.work_dir):
            os.makedirs(self.work_dir) # Create work space

        t1 = self.parsed_dict['t1'] # Extract input file name
        # Locate the input file:
        self.t1_input_file = ld.locate_SwissProtfile(t1, self.work_dir)

        t2 = self.parsed_dict['t2'] # Extract input file name

        # Locate the input file:
        self.t2_input_file = ld.locate_SwissProtfile(t2, self.work_dir)

        # Create output file names to store test sequences:
        self.evalSet_mfo = self.__create_outfilename('mfo')
        self.evalSet_bpo = self.__create_outfilename('bpo')
        self.evalSet_cco = self.__create_outfilename('cco')

        # Create output file name for mapping between SwissProt 
        self.evalSet_mfo_map = self.evalSet_mfo + '.map'
        self.evalSet_bpo_map = self.evalSet_bpo + '.map' 
        self.evalSet_cco_map = self.evalSet_cco + '.map'

        return None

    def __create_outfilename(self, ontType):
        """ 
        Creates an output filename based on the output filename prefix
        provided by the user and at the end returns the newly
        created output filename. If the output file prefix is not
        supplied, it creates output file name using DEFAULT_PREFIX. 
        """
        if not self.parsed_dict['outfile'] == '': # output filename is supplied
            if not basename(self.parsed_dict['g']): # if the taxon id is NOT supplied
                ob = basename(self.parsed_dict['outfile']) + '.%s' %ontType
            else: # if taxon id is supplied
                ob = basename(self.parsed_dict['outfile']) + '.%s' \
                     % basename(self.parsed_dict['g']) +'.%s' %ontType
        else: # if output file name is NOT supplied, construct one:
            if not basename(self.parsed_dict['g']):
                ob = DEFAULT_PREFIX + '.%s' %ontType
            else: # if taxon id is supplied
                ob = DEFAULT_PREFIX + '.%s' % basename(self.parsed_dict['g']) \
                     +'.%s' %ontType
                # output file name is constructed by appending '.taxon id.tfa'
                # as an extension
        index = 1
        while os.path.exists(self.work_dir + '/' + ob + '.' + str(index)):
            index = index + 1
        output_filename = self.work_dir + '/' + ob + '.' + str(index)
        return output_filename

    def __print_prolog(self):
        print ("*************************************************")
        print ("Running Evaluation Data Generatin Tool !!!!!")
        print ('Following is a list of user supplied inputs:')
        for arg in self.parsed_dict:
            print (arg + ': ' + str(self.parsed_dict[arg]))
        print ('*********************************************\n')
        return None

    def __print_epilog(self):
        print(bcolors.OKGREEN + 'The following output files are created: ' +
              bcolors.ENDC)
        if os.path.exists(self.evalSet_mfo) and os.path.exists(self.evalSet_mfo_map):
            print('    MFO-Test sequence file and the corresponding map file: ')
            print('         ' + basename(self.evalSet_mfo))
            print('         ' + basename(self.evalSet_mfo_map))
        if os.path.exists(self.evalSet_bpo) and os.path.exists(self.evalSet_bpo_map):
            print('    BPO-Test sequence file and the corresponding map file: ')
            print('         ' + basename(self.evalSet_bpo))
            print('         ' + basename(self.evalSet_bpo_map))
        if os.path.exists(self.evalSet_cco) and os.path.exists(self.evalSet_cco_map):
            print('    CCO-Test sequence file and the corresponding map file: ')
            print('         ' + basename(self.evalSet_cco))
            print('         ' + basename(self.evalSet_cco_map))
        print(bcolors.OKGREEN + 'Thank you for using Evaluation Data Generation Tool' + \
               bcolors.ENDC)
        return None

    def __check_sprot_format(self, sprot_fname):
        """
        This method exits the program on any of the
        following conditions:
            Case 1: if the file is empty
            Case 2: if the file is NOT in UniProtKB/SwissProt format.
                    To check this it invokes check_sprot_format method
                    of FormatChecker module.
        """
        if os.stat(sprot_fname).st_size == 0:
            print(bcolors.WARNING + 'You submitted an empty file: ' + sprot_fname + \
                  bcolors.ENDC)
            sys.exit(1)
        elif not fc.check_sprot_format(open(sprot_fname, 'r')):
            print(bcolors.WARNING + 'File format error: ' + \
                  basename(sprot_fname) + bcolors.ENDC)
            print(bcolors.WARNING + 'File must be in UniProtKB/SwissProt ' + \
                'format' + bcolors.ENDC)
            sys.exit(1)

    def process_data(self):
        """
        This method invokes other methods to perform all tasks related
        to evaluation sequence generation.
        """
        # Print the wellcome message:
        self.__print_prolog()

        # Check UniProtKB/SwissProt file format: 
        self.__check_sprot_format(self.t1_input_file)

        # Check UniProtKB/SwissProt file format: 
        self.__check_sprot_format(self.t2_input_file)

        # Filter out the target sequences from the UniProtKB/SwissProt file:
        print('Filtering evaluation set based on ' + \
               basename(self.t1_input_file) + ' (data at t1) and ' + \
               basename(self.t2_input_file) + ' (data at t2) ...')
        if not basename(self.parsed_dict['g']): # Extract for all organisms
            xt.create_evalSet_allSpecies(open(self.t1_input_file, 'r'),
                                         open(self.t2_input_file, 'r'),
                                         open(self.evalSet_mfo, 'w'),
                                         open(self.evalSet_mfo_map, 'w'),
                                         open(self.evalSet_bpo, 'w'),
                                         open(self.evalSet_bpo_map, 'w'),
                                         open(self.evalSet_cco, 'w'),
                                         open(self.evalSet_cco_map, 'w'),
                                         self.ConfigParam['exp_eec'])
        else: # Extract for specific organism 
            xt.create_evalSet_singleSpecies(open(self.t1_input_file, 'r'),
                                            open(self.t1_input_file, 'r'),
                                            self.parsed_dict['g'],
                                            open(self.evalSet_mfo, 'w'),
                                            open(self.evalSet_mfo_map, 'w'),
                                            open(self.evalSet_bpo, 'w'),
                                            open(self.evalSet_bpo_map, 'w'),
                                            open(self.evalSet_cco, 'w'),
                                            open(self.evalSet_cco_map, 'w'),
                                            self.ConfigParam['exp_eec'])
        # Print the summary of running this program:
        self.__print_epilog()
        return None

if __name__ == '__main__':
    if len(sys.argv) == 1:
        print(sys.argv[0] + ':')
        print(__doc__)
    else:
        fd = xTract_evalSet() # Create an instance of xTract_testSeq class
        fd.process_data() # Process data and filter out target sequences
    sys.exit(0)
