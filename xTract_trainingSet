#!/usr/bin/env python
'''
    xTract_trainingSeq program accepts the following three inputs:
           (1) a UniProtKB/swissProt file
           (2) an optional taxon id and
           (3) an optional output file name
    This program extracts the protein sequences from the UniProtKB/SwissProt
    file that are experimentally annotated and writes them to the output
    files in MFO, BPO, and CCO ontological categories.
    When the taxon id is NOT given, it will extract the training sequences 
    for all species. In case the taxon id is given by the user, the program 
    will extract the sequences for the organism specified by the taxon id 
    only.
    When the output file name is NOT given, it will construct an output file
    name by combining a portion of the UniProtKB/SwissProt file name (and the 
    taxon id if it is supplied by the user).
    How to run this program?
    Mode 1: extract sequences for all species from some input file 
            uniprot_sprot.dat.2010_01
       > python xTract_trainingSet -I1=uniprot_sprot.dat.2014_09
    Six output files will be created:
        Three files with training sequences in MFO, BPO, and CCO 
        ontological groups:
            uniprot_sprot.dat.2010_01.tfa_LK_mfo.1
            uniprot_sprot.dat.2010_01.tfa_LK_bpo.1
            uniprot_sprot.dat.2010_01.tfa_LK_cco.1
        Three corresponding map files:
            uniprot_sprot.dat.2010_01.tfa_LK_mfo.1.map
            uniprot_sprot.dat.2010_01.tfa_LK_bpo.1.map
            uniprot_sprot.dat.2010_01.tfa_LK_cco.1.map
        Each map file will have three types of information: 
           Sequence id, protein name, and list of GO terms that have EXP evidence.

    Mode 2: extract sequences for a specific species from some input file 
            uniprot_sprot.dat.2010_01 and taxon id 9606
       > python xTract_trainingSet -I1=uniprot_sprot.dat.2010_01 -G=9606
    Three fasta files and three map files will be created:
            uniprot_sprot.dat.2010_01.9606.tfa_LK_mfo.1
            uniprot_sprot.dat.2010_01.9606.tfa_LK_bpo.1
            uniprot_sprot.dat.2010_01.9606.tfa_LK_cco.1
            uniprot_sprot.dat.2010_01.9606.tfa_LK_mfo.1.map
            uniprot_sprot.dat.2010_01.9606.tfa_LK_bpo.1.map
            uniprot_sprot.dat.2010_01.9606.tfa_LK_cco.1.map
'''
import os
import sys
from os.path import basename 

import configparser as cp
import shutil
import subprocess

import ArgParser_xTract_trainingSet as ap
import Config
import xTract_sp_trainingSet as xt
import FormatChecker as fc
import LocateDataset as ld

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# Default configuration file name:
config_filename = '.cafarc' 
DEFAULT_PREFIX = 'trainingSet'

class xTract_trainingSeq:
    def __init__(self):
        # Collect user arguments into a dictionary:
        self.parsed_dict = ap.parse_args()

        # Collect config file entries:
        self.ConfigParam = Config.read_config(config_filename) 
        self.work_dir = self.ConfigParam['workdir']

        # Look for workspace, and if none exists create one:
        if not os.path.exists(self.work_dir):
            os.makedirs(self.work_dir) # Create work space

        t1 = self.parsed_dict['t1'] # Extract input file name
        # Locate the input file:
        self.t1_input_file = ld.locate_SwissProtfile(t1, self.work_dir)

        # Create output file names to store training sequences:
        self.trSet_mfo = self.__create_outfilename('mfo')
        self.trSet_bpo = self.__create_outfilename('bpo')
        self.trSet_cco = self.__create_outfilename('cco')

        # Create output file name for mapping between SwissProt 
        self.trSet_mfo_map = self.trSet_mfo + '.map'
        self.trSet_bpo_map = self.trSet_bpo + '.map' 
        self.trSet_cco_map = self.trSet_cco + '.map'
        return None

    def __create_outfilename(self, ontType):
        """ 
        Creates an output filename based on the output file prefix
        provided by the user and at the end returns the newly
        created output filename.
        """
        if not self.parsed_dict['outfile'] == '':
            if not basename(self.parsed_dict['g']): # if the taxon id is NOT supplied
                #ob = basename(self.parsed_dict['outfile']) + '.tfa_' + ontType
                ob = basename(self.parsed_dict['outfile']) + '.%s' %ontType
            else: # if taxon id is supplied
                ob = basename(self.parsed_dict['outfile']) + '.%s' \
                          % basename(self.parsed_dict['g']) + '.%s' %ontType
        else: # if output file name is NOT supplied, construct one:
            if not basename(self.parsed_dict['g']):
                ob = DEFAULT_PREFIX + '.%s' %ontType
                #ob = basename(self.parsed_dict['t1']) + '.%s' %ontType
            else: # if taxon id is supplied
                ob = DEFAULT_PREFIX + '.%s' % basename(self.parsed_dict['g']) \
                     + '.%s' %ontType
                #ob = basename(self.parsed_dict['t1']) + '.%s' \
                #          % basename(self.parsed_dict['g']) + '.%s' %ontType
                # output file name is constructed by appending '.taxon id.tfa'
                # as an extension
        index = 1
        while os.path.exists(self.work_dir + '/' + ob + '.' + str(index)):
            index = index + 1
        output_filename = self.work_dir + '/' + ob + '.' + str(index)
        return output_filename

    def __print_prolog(self):
        print ("*************************************************")
        print ("Running Training Set Generatin Tool !!!!!")
        print ('Following is a list of user supplied inputs:')
        for arg in self.parsed_dict:
            print (arg + ': ' + str(self.parsed_dict[arg]))
        print ('*********************************************\n')
        return None

    def __print_epilog(self):
        print(bcolors.OKGREEN + 'The following output files are created: ' +
              bcolors.ENDC)
        if os.path.exists(self.trSet_mfo) and os.path.exists(self.trSet_mfo_map):
            print('    MFO-Training sequence file and the corresponding map file: ')
            print('         ' + basename(self.trSet_mfo))
            print('         ' + basename(self.trSet_mfo_map))
        if os.path.exists(self.trSet_bpo) and os.path.exists(self.trSet_bpo_map):
            print('    BPO-Training sequence file and the corresponding map file: ')
            print('         ' + basename(self.trSet_bpo))
            print('         ' + basename(self.trSet_bpo_map))
        if os.path.exists(self.trSet_cco) and os.path.exists(self.trSet_cco_map):
            print('    CCO-Training sequence file and the corresponding map file: ')
            print('         ' + basename(self.trSet_cco))
            print('         ' + basename(self.trSet_cco_map))
        print(bcolors.OKGREEN + 'Thank you for using Training Sequence Generation Tool' + \
               bcolors.ENDC)
        return None

    def __check_sprot_format(self, sprot_fname):
        """
        This method exits the xTract_trainingSeq program on any of the
        following conditions:
            Case 1: if the file is empty
            Case 2: if the file is NOT in UniProtKB/SwissProt format.
                    To check this it invokes __check_sprot_format method
                    of FormatChecker module.
        """
        if os.stat(sprot_fname).st_size == 0:
            print(bcolors.WARNING + 'You submitted an empty file: ' + sprot_fname + \
                  bcolors.ENDC)
            sys.exit(1)
        elif not fc.check_sprot_format(open(sprot_fname, 'r')):
            print(bcolors.WARNING + 'File format error: ' + \
                  basename(sprot_fname) + bcolors.ENDC)
            print(bcolors.WARNING + 'File must be in UniProtKB/SwissProt ' + \
                'format' + bcolors.ENDC)
            sys.exit(1)

    def process_data(self):
        """
        This method invokes other methods to perform all tasks related
        to training sequence generation.
        """
        # Print the wellcome message:
        self.__print_prolog()

        # Check UniProtKB/SwissProt file format: 
        self.__check_sprot_format(self.t1_input_file)

        # Filter out the target sequences from the UniProtKB/SwissProt file:
        print('Filtering training sequences from ' + \
               basename(self.t1_input_file) + ' ...')

        if not basename(self.parsed_dict['g']): # Extract for all organisms
            xt.create_trainingSet_allSpecies(open(self.t1_input_file, 'r'),
                                             open(self.trSet_mfo, 'w'),
                                             open(self.trSet_mfo_map, 'w'),
                                             open(self.trSet_bpo, 'w'),
                                             open(self.trSet_bpo_map, 'w'),
                                             open(self.trSet_cco, 'w'),
                                             open(self.trSet_cco_map, 'w'),
                                             self.ConfigParam['exp_eec'])
        else: # Extract for specific organism
            xt.create_trainingSet_singleSpecies(open(self.t1_input_file, 'r'),
                                             self.parsed_dict['g'],
                                             open(self.trSet_mfo, 'w'),
                                             open(self.trSet_mfo_map, 'w'),
                                             open(self.trSet_bpo, 'w'),
                                             open(self.trSet_bpo_map, 'w'),
                                             open(self.trSet_cco, 'w'),
                                             open(self.trSet_cco_map, 'w'),
                                             self.ConfigParam['exp_eec'])
        # Print the summary of running this program:
        self.__print_epilog()
        return None

if __name__ == '__main__':
    if len(sys.argv) == 1:
        print(sys.argv[0] + ':')
        print(__doc__)
    else:
        fd = xTract_trainingSeq() # Create an instance of xTract_trainingSeq class
        fd.process_data() # Process data and filter out target sequences
    sys.exit(0)
