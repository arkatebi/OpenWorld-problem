#!/usr/bin/env python
'''
    This tool generates the tes set of protein sequences for the
    re-evaluation of a predictive model. The tool accepts the following
    four inputs:
           (1) a map file from time t1
           (2) a UniProtKB/swissProt file at time t2
           (3) an ontology name
           (3) an optional taxon id and
           (4) an optional output file name
    This tool extracts the protein sequences from the UniProtKB/SwissProt 
    database at t2 for the proteins that gained new experimental annotations
    after time t1. The extracted sequenes are written to the output file.
   
    When the taxon id is NOT supplied, it will extract the test sequences 
    for all species. In case the taxon id is supplied by the user, the program 
    will extract the sequences for that specific organism only.

    When the output file name is NOT given, it will construct an output file
    name by adding suffixes at the end of default prefix.
    
    How to run this program?
    Mode 1: 
        For two input files evalSet-1.mfo.mpa at time t1 and 
        uniprot_sprot.dat.2011_01 at time t2

       > python xTract_reevalSet -I1=evalSet-1.mfo.map -I2=uniprot_sprot.dat.2011_01 -N=F
  
        Two output files will be created:  
            evalSet-2.mfo.1
            evalSet-2.mfo.1.map
    Mode 2:
        For two input files uniprot_sprot.dat.2010_01 at time t1 and 
        uniprot_sprot.dat.2011_01 at time t2 and taxon id 9606

       > python xTract_reevalSet -I1=evalSet-1.mfo.map -I2=uniprot_sprot.dat.2011_01 -N=F -G=9606

    Three fasta files and the three map files will be created:
        Two output files will be created:  
            evalSet-2.9606.mfo.1
            evalSet-2.9606.mfo.1.map
'''
import os
import sys
from os.path import basename 

import configparser as cp
import shutil
import subprocess

import ArgParser_xTract_reevalSet as ap
import Config
import xTract_sp_reevalSet as xt
import FormatChecker as fc
import LocateDataset as ld

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# Default configuration file name:
config_filename = '.cafarc' 

splitterStr = '.dat.'
year_Llimit = 2010
month_str = ['01','02','03','04','05','06','07','08','09','10','11','12']

DEFAULT_PREFIX = 'evalSet'

class xTract_reevalSet: 
    def __init__(self):
        # Collect user arguments into a dictionary:
        self.parsed_dict = ap.parse_args()

        # Collect config file entries:
        self.ConfigParam = Config.read_config(config_filename) 
        self.work_dir = self.ConfigParam['workdir']

        # Look for workspace, and if none exists create one:
        if not os.path.exists(self.work_dir):
            os.makedirs(self.work_dir) # Create work space

        t1 = self.parsed_dict['t1'] # Extract input file name
        # Locate the input file:
        self.t1_input_file = ld.locate_SwissProtfile(t1, self.work_dir)
        t2 = self.parsed_dict['t2'] # Extract input file name
        # Locate the input file:
        self.t2_input_file = ld.locate_SwissProtfile(t2, self.work_dir)

        self.ontology_name = self.parsed_dict['Aspect'] # Extract ontology name 

        #if not self.check_map_filename_format(t1): 
        #    sys.exit(0) 

        # Check the SwissProt filename formats:
        if not self.check_SwissProt_filename_format(t2):
            sys.exit(0)

        self.reevalSet_fname = self.create_outfilename(self.ontology_name)
        self.reevalSet_map_fname = self.reevalSet_fname + '.map'
        return None
        
    def create_outfilename(self, ontType):
        """ 
        Creates an output filename based on the output file prefix
        provided by the user and at the end returns the newly
        created output filename. If the output file prefix is not 
        supplied, it creates output file name from the two input file 
        names. 
        """
        if ontType.upper()=='F':
            suffix = 'mfo'
        elif ontType.upper()=='P':
            suffix = 'bpo'
        elif ontType.upper()=='C':
            suffix = 'cco'
        if not self.parsed_dict['outfile'] == '': # output filename is supplied
            if not basename(self.parsed_dict['g']): # if the taxon id is NOT supplied
                ob = basename(self.parsed_dict['outfile']) + \
                     '.%s'%suffix
            else: # if taxon id is supplied
                ob = basename(self.parsed_dict['outfile']) + \
                     '.%s' % basename(self.parsed_dict['g']) + \
                     '.%s'%suffix
        else: # if output file name is NOT supplied, construct one:
            if not basename(self.parsed_dict['g']):
                ob = DEFAULT_PREFIX + '.%s' %suffix
            else: # if taxon id is supplied
                ob = DEFAULT_PREFIX + '.%s' \
                     % basename(self.parsed_dict['g']) + \
                     '.%s' % suffix 
                # output file name is constructed by appending '.taxon id.'
                # as an extension to the filename prefix
        index = 1
        while os.path.exists(self.work_dir + '/' + ob + '.' + str(index)):
            index = index + 1
        output_filename = self.work_dir + '/' + ob + '.' + str(index)
        return output_filename

    def create_iterator(self, infile):
        """ 
        Creates and returns an iterator object for an input a UniProt-GOA
        file along with a list of all field names contained in the
        UniProt-GOA file.
        """
        infile_handle = open(infile, 'r')
        iter_handle = GOA.gafiterator(infile_handle)
        for ingen in iter_handle:
            if len(ingen) == 17:
                GAFFIELDS = GOA.GAF20FIELDS
                break
            else:
                GAFFIELDS = GOA.GAF10FIELDS
                break
        infile_handle = open(infile, 'r')
        iter_handle = GOA.gafiterator(infile_handle)
        return iter_handle, GAFFIELDS

    def print_prolog(self):
        print ("*************************************************")
        print ("Running Reevaluation Sequence Generatin Tool !!!!!")
        print ('Following is a list of user supplied inputs:')
        for arg in self.parsed_dict:
            print (arg + ': ' + str(self.parsed_dict[arg]))
        print ('*********************************************\n')
        return None

    def print_epilog(self):
        print(bcolors.OKGREEN + 'The following output files are created: ' +
              bcolors.ENDC)
        if os.path.exists(self.reevalSet_fname):
            print('    Reevaluation sequence file: ')
            print('         ' + basename(self.reevalSet_fname))
        if os.path.exists(self.reevalSet_map_fname ):
            print('    Reevaluation sequence map file: ')
            print('         ' + basename(self.reevalSet_map_fname))
        print(bcolors.OKGREEN + 'Thank you for using Reevaluation Sequence ' + \
              'Generation Tool' + bcolors.ENDC)
        return None

    def check_SwissProt_filename_format(self, sp_fname):
        '''
        This method checks whether UniProtKB/SwissProt filenames are 
        are named in the correct format.
        The names of the files should be in this format: 
            uniprot_sprot.dat.yyyy_mm
            yyyy is a year that cannot be less than year_Llimit 
            mm is a month that must be in month_str
            where year_Llimit and month_str are global variables.   
        If the file name is NOT in that format, 
            the the method returns False.
        If all above checks are passed, the method returns True
        '''
        if not splitterStr in basename(sp_fname):
             print('Given UniProtKB/SwissProt filename: ' + basename(sp_fname.strip()))
             print('File name format must be: ' + 'prfix' + splitterStr + 'date')
             return False
        fname_parts = basename(sp_fname).strip().split(splitterStr)
        if (len(fname_parts)) != 2: 
             print('Given UniProtKB/SwissProt filename: ' + basename(sp_fname.strip()))
             print('File name format must be: ' + 'prfix' + splitterStr + 'date')
             return False
        if len(fname_parts[1].split('_')) !=2:
            print('Third part of the filename must be in the format: ' + '"yyyy_mm"')
            return False
        yy = fname_parts[1].split('_')[0]
        mm = fname_parts[1].split('_')[1]
        if int(yy) < year_Llimit:
            print('Given UniProtKB/SwissProt filename: ' + basename(sp_fname.strip()))
            print('Third part of the filename must be in the format: ' + '"yyyy_mm"')
            print('And a valid year must be greater than 2009')
            return False
        if(mm not in month_str):
            print('Given UniProtKB/SwissProt filename: ' + basename(sp_fname.strip()))
            print('Third part of the filename must be in the format: ' + '"yyyy_mm"')
            print('And a valid month must be between 01 and 12.')
            return False
        return True

    def check_sprot_format(self, sprot_fname):
        """
        This method exits the xTract_testSeq program on any of the
        following conditions:
            Case 1: if the file is empty
            Case 2: if the file is NOT in UniProtKB/SwissProt format.
                    To check this it invokes check_sprot_format method
                    of FormatChecker module.
        """
        if os.stat(sprot_fname).st_size == 0:
            print(bcolors.WARNING + 'You submitted an empty file: ' + sprot_fname + \
                  bcolors.ENDC)
            sys.exit(1)
        elif not fc.check_sprot_format(open(sprot_fname, 'r')):
            print(bcolors.WARNING + 'File format error: ' + \
                  basename(sprot_fname) + bcolors.ENDC)
            print(bcolors.WARNING + 'File must be in UniProtKB/SwissProt ' + \
                'format' + bcolors.ENDC)
            sys.exit(1)

    def process_data(self):
        """
        This method invokes other methods to perform all tasks related
        to test sequence generation.
        """
        # Print the wellcome message:
        self.print_prolog()

        # Check UniProtKB/SwissProt file format: 
        self.check_sprot_format(self.t2_input_file)

        # Filter out the target sequences from the UniProtKB/SwissProt file:
        print('Filtering reevaluation sequences based on ' + \
               basename(self.t1_input_file) + ' (map file at t1) and \n' + \
               basename(self.t2_input_file) + ' (SwissProt file at t2) ...')

        if not basename(self.parsed_dict['g']): # Extract for all organisms
            print('Ontology: ' + self.ontology_name)
            xt.create_reevalSet_allSpecies(open(self.t1_input_file, 'r'),
                                         open(self.t2_input_file, 'r'),
                                         open(self.reevalSet_fname, 'w'),
                                         open(self.reevalSet_map_fname, 'w'),
                                         self.ontology_name,
                                         self.ConfigParam['exp_eec'])
        else: # Extract for specific organism 
            print ('Not implmented yet. Quitting ...')
            sys.exit(0)
        # Print the summary of running this program:
        self.print_epilog()
        return None

if __name__ == '__main__':
    if len(sys.argv) == 1:
        print(sys.argv[0] + ':')
        print(__doc__)
    else:
        fd = xTract_reevalSet() # Create an instance of xTract_reevalSeq class
        fd.process_data() # Process input files and filter out sequences
    sys.exit(0)
